name: Self-Repair

on:
  workflow_run:
    workflows: ["*"]
    types: [completed]
  workflow_dispatch:
    inputs:
      run_id:
        description: 'Workflow run ID to repair (optional, uses latest failed if empty)'
        required: false
        type: string

permissions:
  contents: write
  pull-requests: write
  actions: read
  checks: read
  id-token: write
  issues: write

jobs:
  self-repair:
    # Only run if a workflow failed, or if manually triggered, or on schedule
    if: |
      github.event_name == 'workflow_dispatch' ||
      github.event_name == 'schedule' ||
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'failure')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (main branch for now)
        uses: actions/checkout@v4

      - name: Find failed workflow run
        id: find_failure
        run: |
          # Determine which run to repair
          if [ -n "${{ github.event.inputs.run_id }}" ]; then
            RUN_ID="${{ github.event.inputs.run_id }}"
            echo "Using provided run ID: $RUN_ID"
          elif [ "${{ github.event_name }}" = "workflow_run" ]; then
            RUN_ID="${{ github.event.workflow_run.id }}"
            echo "Using triggering workflow run ID: $RUN_ID"
          else
            # Find most recent failed run
            RUN_ID=$(gh run list --limit 50 --json conclusion,databaseId \
              --jq '.[] | select(.conclusion == "failure") | .databaseId' | head -1)
            if [ -z "$RUN_ID" ]; then
              echo "No failed runs found"
              echo "has_failure=false" >> $GITHUB_OUTPUT
              exit 0
            fi
            echo "Found most recent failed run: $RUN_ID"
          fi

          echo "run_id=$RUN_ID" >> $GITHUB_OUTPUT
          echo "has_failure=true" >> $GITHUB_OUTPUT

          # Get workflow details
          WORKFLOW_NAME=$(gh run view "$RUN_ID" --json name --jq '.name' 2>/dev/null || echo "unknown")
          echo "workflow_name=$WORKFLOW_NAME" >> $GITHUB_OUTPUT

          # Get the commit SHA from the failed run
          FAILED_COMMIT=$(gh run view "$RUN_ID" --json headSha --jq '.headSha' 2>/dev/null || echo "")
          echo "failed_commit=$FAILED_COMMIT" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Checkout failed commit
        if: steps.find_failure.outputs.has_failure == 'true' && steps.find_failure.outputs.failed_commit != ''
        run: |
          echo "Checking out commit from failed run: ${{ steps.find_failure.outputs.failed_commit }}"
          git fetch origin ${{ steps.find_failure.outputs.failed_commit }}
          git checkout ${{ steps.find_failure.outputs.failed_commit }}

      - name: Prepare repair context
        if: steps.find_failure.outputs.has_failure == 'true'
        id: context
        run: |
          RUN_ID="${{ steps.find_failure.outputs.run_id }}"

          # Make handler executable
          chmod +x scripts/debug-workflows.sh

          # Run debug script
          ./scripts/debug-workflows.sh > handler_output.txt
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Claude analyzes and repairs workflow
        if: steps.find_failure.outputs.has_failure == 'true'
        id: claude_repair
        uses: anthropics/claude-code-action@v1
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          claude_args: |
            --allowedTools "Read,Write,Edit,Bash(gh:*),Bash(git:*)"
          prompt: |
            üîß **WORKFLOW SELF-REPAIR MODE ACTIVATED**

            A workflow has failed and needs your expert analysis and repair.

            **Failed Workflow**: ${{ steps.find_failure.outputs.workflow_name }}
            **Run ID**: ${{ steps.find_failure.outputs.run_id }}
            **View Run**: https://github.com/${{ github.repository }}/actions/runs/${{ steps.find_failure.outputs.run_id }}

            Use `gh run view ${{ steps.find_failure.outputs.run_id }} --log-failed` to see the failure logs.

            **Your Mission**:
            1. Analyze the failure logs to identify the root cause
            2. Examine the CURRENT checked-out code to understand the issue
            3. Switch to main branch: `git checkout main && git pull origin main`
            4. Implement the appropriate fix:
               - Fix workflow YAML if it's a configuration issue
               - Create missing files (e.g., data.json) if needed
               - Add error handling or retries if it's a transient issue
               - Update documentation if manual setup is required
            5. For simple fixes: Commit directly to main
            6. For complex changes: Create a PR with detailed description

            **Important**:
            - If the issue requires manual setup (like enabling GitHub Pages or adding secrets),
              create a GitHub Issue with clear setup instructions using `gh issue create`
            - Check if data.json exists - create it with initial content if missing
            - Consider if the workflow needs better error handling
            - Think about whether the schedule is too aggressive (rate limits?)
            - You can use `gh` commands for all GitHub operations (issues, PRs, runs, etc.)

            **After Fixing**:
            Provide a clear summary of:
            - What was broken
            - What you fixed
            - How you fixed it (commit/PR/issue)
            - Any follow-up actions needed

            Let's fix this workflow! üõ†Ô∏è

      - name: Check for Claude errors
        if: steps.find_failure.outputs.has_failure == 'true'
        run: |
          # Check if Claude reported any errors in its output
          if gh run view ${{ github.run_id }} --log | grep -i "error\|failed\|failure" | grep -v "failed workflow" | grep -v "Fix failed"; then
            echo "‚ö†Ô∏è Claude Code encountered errors during repair"
            echo "Check the Claude Code Action output above for details"
            exit 1
          fi
        env:
          GH_TOKEN: ${{ github.token }}
        continue-on-error: false

      - name: Notify success
        if: steps.find_failure.outputs.has_failure == 'true'
        run: |
          echo "‚úÖ Claude self-repair completed for run ${{ steps.find_failure.outputs.run_id }}"
          echo "   Workflow: ${{ steps.find_failure.outputs.workflow_name }}"
          echo ""
          echo "Check the Claude Code Action output above for details on the fix."
