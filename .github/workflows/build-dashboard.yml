name: Build Dashboard

on:
  push:
    branches: [main]
    paths:
      - 'data.json'
      - 'weather.json'
      - 'theme.css'
      - '.github/workflows/build-dashboard.yml'
  schedule:
    - cron: '*/30 * * * *'  # Every 30 minutes
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write
  actions: read

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build-deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Fetch workflow run data
        id: workflows
        run: |
          # Get recent workflow runs
          gh run list --limit 50 --json name,conclusion,startedAt,databaseId,workflowName \
            > workflow_runs.json
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate dashboard HTML
        run: |
          mkdir -p dist

          # Read all data files
          DATA=$(cat data.json 2>/dev/null || echo '{}')
          WEATHER=$(cat weather.json 2>/dev/null || echo '{}')
          THEME=$(cat theme.css 2>/dev/null || echo '/* No theme yet */')
          WORKFLOWS=$(cat workflow_runs.json 2>/dev/null || echo '[]')

          # Generate HTML
          cat > dist/index.html << 'HTMLEOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Claude Automaton</title>
            <style>
THEMECSS
              /* Base styles */
              * {
                margin: 0;
                padding: 0;
                box-sizing: border-box;
              }

              body {
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
                line-height: 1.6;
                color: var(--text-primary, #1a1a1a);
                background: var(--bg-primary, #ffffff);
                padding: 1rem;
                transition: background 0.3s ease, color 0.3s ease;
              }

              .container {
                max-width: 1200px;
                margin: 0 auto;
              }

              header {
                text-align: center;
                padding: 2rem 0 3rem;
                border-bottom: 2px solid var(--accent, #007aff);
              }

              h1 {
                font-size: clamp(2rem, 5vw, 3.5rem);
                font-weight: 700;
                margin-bottom: 0.5rem;
                background: linear-gradient(135deg, var(--accent, #007aff), var(--accent-secondary, #5856d6));
                -webkit-background-clip: text;
                -webkit-text-fill-color: transparent;
                background-clip: text;
              }

              .subtitle {
                font-size: 1.1rem;
                opacity: 0.7;
                font-weight: 300;
              }

              .grid {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
                gap: 1.5rem;
                margin: 2rem 0;
              }

              .card {
                background: var(--bg-secondary, #f5f5f7);
                border-radius: 16px;
                padding: 1.5rem;
                box-shadow: 0 2px 8px rgba(0,0,0,0.1);
                transition: transform 0.2s ease, box-shadow 0.2s ease;
              }

              .card:hover {
                transform: translateY(-4px);
                box-shadow: 0 4px 16px rgba(0,0,0,0.15);
              }

              .card h2 {
                font-size: 1.3rem;
                margin-bottom: 1rem;
                display: flex;
                align-items: center;
                gap: 0.5rem;
              }

              .card-icon {
                font-size: 1.5rem;
              }

              .data-list {
                list-style: none;
              }

              .data-item {
                padding: 0.75rem 0;
                border-bottom: 1px solid rgba(0,0,0,0.05);
              }

              .data-item:last-child {
                border-bottom: none;
              }

              .data-label {
                font-weight: 600;
                color: var(--accent, #007aff);
                font-size: 0.9rem;
                display: block;
                margin-bottom: 0.25rem;
              }

              .data-value {
                font-size: 1.1rem;
              }

              .weather-big {
                font-size: 3rem;
                font-weight: 700;
                text-align: center;
                margin: 1rem 0;
              }

              .meta {
                background: rgba(0,0,0,0.03);
                border-radius: 12px;
                padding: 1rem;
                margin-top: 2rem;
              }

              .meta-title {
                font-size: 1.5rem;
                margin-bottom: 1rem;
                opacity: 0.8;
              }

              .workflow-status {
                display: flex;
                align-items: center;
                gap: 0.75rem;
                padding: 0.75rem;
                background: var(--bg-secondary, #f5f5f7);
                border-radius: 8px;
                margin: 0.5rem 0;
                font-size: 0.9rem;
              }

              .status-dot {
                width: 8px;
                height: 8px;
                border-radius: 50%;
                flex-shrink: 0;
              }

              .status-success { background: #34c759; }
              .status-failure { background: #ff3b30; }
              .status-pending { background: #ff9500; }

              .workflow-name {
                font-weight: 600;
                flex: 1;
              }

              .workflow-time {
                opacity: 0.6;
                font-size: 0.85rem;
              }

              .workflow-link {
                color: var(--accent, #007aff);
                text-decoration: none;
                font-size: 0.85rem;
              }

              .workflow-link:hover {
                text-decoration: underline;
              }

              footer {
                text-align: center;
                padding: 3rem 0 2rem;
                opacity: 0.6;
                font-size: 0.9rem;
              }

              .timestamp {
                opacity: 0.5;
                font-size: 0.85rem;
                margin-top: 0.5rem;
                font-style: italic;
              }

              /* Mobile optimizations */
              @media (max-width: 768px) {
                .grid {
                  grid-template-columns: 1fr;
                }

                header {
                  padding: 1.5rem 0 2rem;
                }
              }

              /* Fun animations */
              @keyframes fadeIn {
                from {
                  opacity: 0;
                  transform: translateY(20px);
                }
                to {
                  opacity: 1;
                  transform: translateY(0);
                }
              }

              .card {
                animation: fadeIn 0.5s ease-out;
                animation-fill-mode: both;
              }

              .card:nth-child(1) { animation-delay: 0.1s; }
              .card:nth-child(2) { animation-delay: 0.2s; }
              .card:nth-child(3) { animation-delay: 0.3s; }
              .card:nth-child(4) { animation-delay: 0.4s; }
            </style>
          </head>
          <body>
            <div class="container">
              <header>
                <h1>ü§ñ Claude Automaton</h1>
                <p class="subtitle">Self-improving AI infrastructure ¬∑ New York, NY</p>
              </header>

              <div class="grid">
CONTENTHTML
              </div>

              <div class="meta">
                <h2 class="meta-title">üîß System Status</h2>
WORKFLOWSHTML
                <div class="timestamp">
                  Dashboard built: BUILDTIME
                </div>
              </div>

              <footer>
                <p><strong>Autonomous automation</strong> powered by Claude</p>
                <p><a href="https://github.com/jamiew/claude-gha-demo" class="workflow-link">View on GitHub</a></p>
              </footer>
            </div>
          </body>
          </html>
          HTMLEOF

          # Now use Node.js to inject the dynamic data
          node << 'NODEOF'
          const fs = require('fs');

          // Read files with fallbacks for missing files
          const data = fs.existsSync('data.json')
            ? JSON.parse(fs.readFileSync('data.json', 'utf-8'))
            : { message: 'No data yet', nytimes_headlines: [], glif: {} };

          const weather = fs.existsSync('weather.json')
            ? JSON.parse(fs.readFileSync('weather.json', 'utf-8'))
            : { temperature: '‚Äî', condition: 'Unknown', humidity: '‚Äî', feels_like: '‚Äî', last_updated: 'Never' };

          const theme = fs.existsSync('theme.css')
            ? fs.readFileSync('theme.css', 'utf-8')
            : '/* No theme yet */';

          const workflows = fs.existsSync('workflow_runs.json')
            ? JSON.parse(fs.readFileSync('workflow_runs.json', 'utf-8'))
            : [];

          let html = fs.readFileSync('dist/index.html', 'utf-8');

          // Inject theme
          html = html.replace('THEMECSS', theme);

          // Build weather card
          const weatherCard = `
            <div class="card">
              <h2><span class="card-icon">üå§Ô∏è</span> Weather</h2>
              <div class="weather-big">${weather.temperature || '‚Äî'}¬∞F</div>
              <ul class="data-list">
                <li class="data-item">
                  <span class="data-label">Condition</span>
                  <span class="data-value">${weather.condition || 'Unknown'}</span>
                </li>
                <li class="data-item">
                  <span class="data-label">Feels Like</span>
                  <span class="data-value">${weather.feels_like || '‚Äî'}¬∞F</span>
                </li>
                <li class="data-item">
                  <span class="data-label">Humidity</span>
                  <span class="data-value">${weather.humidity || '‚Äî'}%</span>
                </li>
              </ul>
              <div class="timestamp">Updated: ${weather.last_updated || 'Never'}</div>
            </div>
          `;

          // Build NY Times card
          const headlines = data.nytimes_headlines || [];
          const headlinesHtml = headlines.length > 0
            ? headlines.slice(0, 5).map(h => `
                <li class="data-item">
                  <span class="data-value">${h}</span>
                </li>
              `).join('')
            : '<li class="data-item"><span class="data-value">No headlines yet</span></li>';

          const nytCard = `
            <div class="card">
              <h2><span class="card-icon">üì∞</span> NY Times</h2>
              <ul class="data-list">
                ${headlinesHtml}
              </ul>
              <div class="timestamp">Updated: ${data.last_updated || 'Never'}</div>
            </div>
          `;

          // Build Glif card
          const glifWorkflows = data.glif?.featured_workflows || [];
          const glifHtml = glifWorkflows.length > 0
            ? glifWorkflows.slice(0, 3).map(w => `
                <li class="data-item">
                  <span class="data-label">${w.name}</span>
                  <span class="data-value" style="font-size:0.9rem;opacity:0.7">${w.description?.substring(0, 60)}...</span>
                </li>
              `).join('')
            : '<li class="data-item"><span class="data-value">No Glif data yet</span></li>';

          const glifCard = `
            <div class="card">
              <h2><span class="card-icon">üé®</span> Glif Workflows</h2>
              <ul class="data-list">
                ${glifHtml}
              </ul>
              <div class="timestamp">Updated: ${data.glif?.last_updated || 'Never'}</div>
            </div>
          `;

          // Build status card
          const totalRuns = workflows.length;
          const successRuns = workflows.filter(w => w.conclusion === 'success').length;
          const failedRuns = workflows.filter(w => w.conclusion === 'failure').length;

          const statusCard = `
            <div class="card">
              <h2><span class="card-icon">‚öôÔ∏è</span> Automation Status</h2>
              <ul class="data-list">
                <li class="data-item">
                  <span class="data-label">Total Runs</span>
                  <span class="data-value">${totalRuns}</span>
                </li>
                <li class="data-item">
                  <span class="data-label">Success Rate</span>
                  <span class="data-value">${totalRuns > 0 ? Math.round(successRuns/totalRuns*100) : 0}%</span>
                </li>
                <li class="data-item">
                  <span class="data-label">Recent Failures</span>
                  <span class="data-value">${failedRuns}</span>
                </li>
              </ul>
            </div>
          `;

          html = html.replace('CONTENTHTML', weatherCard + nytCard + glifCard + statusCard);

          // Build workflows section
          const workflowsHtml = workflows.slice(0, 10).map(w => {
            const statusClass = w.conclusion === 'success' ? 'status-success' :
                              w.conclusion === 'failure' ? 'status-failure' : 'status-pending';
            const time = new Date(w.startedAt).toLocaleString();
            const url = `https://github.com/jamiew/claude-gha-demo/actions/runs/${w.databaseId}`;

            return `
              <div class="workflow-status">
                <div class="status-dot ${statusClass}"></div>
                <div class="workflow-name">${w.name}</div>
                <div class="workflow-time">${time}</div>
                <a href="${url}" class="workflow-link" target="_blank">View ‚Üí</a>
              </div>
            `;
          }).join('');

          html = html.replace('WORKFLOWSHTML', workflowsHtml);
          html = html.replace('BUILDTIME', new Date().toISOString());

          fs.writeFileSync('dist/index.html', html);
          console.log('Dashboard built!');
          NODEOF

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './dist'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
