name: Cross-Repo Notify

on:
  schedule:
    # Run every 8 hours
    - cron: '0 */8 * * *'
  workflow_dispatch:

permissions:
  contents: read

jobs:
  notify-downstream:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Analyze and notify
        uses: anthropics/claude-code-action@v1
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          claude_args: |
            --allowedTools "Bash(git:*),Bash(gh:*),Bash(date:*),Bash(cat:*),Read,Write"
          prompt: |
            Analyze workflow changes from the last 8 hours and create a comprehensive changelog issue.

            **Context:** This changelog will be read by:
            - Documentation teams updating API docs
            - External API users who depend on these workflows
            - Marketing teams writing changelogs
            - Downstream systems that integrate with this repo

            **Tasks:**

            1. Check for workflow changes in the last 8 hours:
               ```bash
               COMMITS=$(git log --since="8 hours ago" --pretty=format:"%H" -- .github/workflows/)
               ```
               If no changes, exit successfully.

            2. Analyze both:
               - Individual commits (to understand progression)
               - Unified diff of entire changeset (to understand net effect)

            3. Write a changelog to `changelog.md` that focuses on IMPACT and MEANING, not code details:

               ## Summary
               [2-4 sentences explaining what changed and why it matters. Use plain language, not technical jargon.]

               ## What This Means
               - **For API users:** [How does this affect people calling our APIs or depending on workflow outputs?]
               - **For documentation:** [What docs need updating? New features to document?]
               - **For downstream systems:** [What behaviors changed? New capabilities? Deprecations?]

               ## Key Changes
               - [Important change 1 - describe the capability or behavior, not the code]
               - [Important change 2]
               - [3-5 key changes focusing on user-visible impact]

               ## Details

               [For each major area of change, provide context:]

               ### [Area/Feature Name]
               - **What changed:** [Describe the change in functional terms]
               - **Why:** [If obvious from commits, explain the motivation]
               - **Impact:** [Who/what is affected and how]

               ## Technical Notes
               <details><summary>For engineers: commit details</summary>

               [List commits with subjects - this is the only place to mention technical details]

               </details>

            **Important guidelines:**
            - Avoid mentioning specific filenames, code syntax, or implementation details
            - Focus on capabilities, behaviors, and user-facing changes
            - Explain WHY changes happened when possible (from commit messages)
            - Think like you're writing for a product changelog or release notes
            - Group related changes together thematically
            - If changes are just internal refactoring with no external impact, say so clearly

            4. Create issue on jamiew/issue-dump:
               ```bash
               export GH_TOKEN="${{ secrets.CROSS_REPO_PAT }}"
               gh issue create \
                 --repo jamiew/issue-dump \
                 --title "Workflow updates in jamiew/clactions ($(date -u '+%Y-%m-%d %H:%M UTC'))" \
                 --body "$(cat changelog.md)

               ---

               @claude Please review these changes and update any affected documentation, API clients, or downstream systems as needed.

               **Source:** jamiew/clactions
               **Period:** Last 8 hours
               **Workflow run:** https://github.com/jamiew/clactions/actions/runs/${{ github.run_id }}"
               ```
